[
    {
        "id": "e1c2cac8.1d5a38",
        "type": "comment",
        "z": "d57c4db3.61669",
        "name": "From NS to Location Solver - REST",
        "info": "[Heluim API documentation](https://developer.helium.com/console/integrations/json-schema)",
        "x": 280,
        "y": 2080,
        "wires": []
    },
    {
        "id": "834d0410.1dd5c8",
        "type": "comment",
        "z": "d57c4db3.61669",
        "name": "From Location Solver to NS - REST",
        "info": "[Heluim API documentation](https://developer.helium.com/console/integrations/json-schema)\n",
        "x": 280,
        "y": 2220,
        "wires": []
    },
    {
        "id": "ec85ab1c.2823b8",
        "type": "comment",
        "z": "d57c4db3.61669",
        "name": "Heluim Integration Examples",
        "info": "[Heluim API documentation](https://developer.helium.com/console/integrations/json-schema)",
        "x": 220,
        "y": 2020,
        "wires": []
    },
    {
        "id": "cdf05b44.a396b8",
        "type": "http in",
        "z": "d57c4db3.61669",
        "name": "",
        "url": "/uplink_helium/0001",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 2160,
        "wires": [ [ "5d0bc8f9.9f4488", "5e94589.12298a8", "d251e1df.f2cb6" ] ]
    },
    {
        "id": "5d0bc8f9.9f4488",
        "type": "http response",
        "z": "d57c4db3.61669",
        "name": "http response",
        "statusCode": "",
        "headers": { "content-type": "application/json" },
        "x": 600,
        "y": 2180,
        "wires": []
    },
    {
        "id": "bf3654b8.2fcb18",
        "type": "debug",
        "z": "d57c4db3.61669",
        "name": "debug: to Solver",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 880,
        "y": 2100,
        "wires": []
    },
    {
        "id": "64dc2faf.dfe9e",
        "type": "http request",
        "z": "d57c4db3.61669",
        "name": "Send UL to Location Solver",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://dx-api-dev1.thingpark.com/location/latest/api/feeds",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "x": 1160,
        "y": 2140,
        "wires": [ [ "122b4d94.708b72" ] ]
    },
    {
        "id": "122b4d94.708b72",
        "type": "debug",
        "z": "d57c4db3.61669",
        "name": "debug: Solver response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 2100,
        "wires": []
    },
    {
        "id": "44249866.635da8",
        "type": "http in",
        "z": "d57c4db3.61669",
        "name": "",
        "url": "/downlink_helium/0001",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 2300,
        "wires": [ [ "9af90f9a.52e9e", "25e8f5ca.bac4ba", "13492271.a0fa2e" ] ]
    },
    {
        "id": "9af90f9a.52e9e",
        "type": "http response",
        "z": "d57c4db3.61669",
        "name": "http response",
        "statusCode": "",
        "headers": { "content-type": "application/json" },
        "x": 600,
        "y": 2320,
        "wires": []
    },
    {
        "id": "d3f4841a.7f04c8",
        "type": "inject",
        "z": "d57c4db3.61669",
        "name": "Sample msg - Loc Solver",
        "topic": "",
        "payload": "{\"type\":\"downlink\",\"deveui\":\"20635F0107000011\",\"port\":\"2\",\"payload\":\"020602\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 290,
        "y": 2260,
        "wires": [ [ "13492271.a0fa2e" ] ]
    },
    {
        "id": "49643e01.89be2",
        "type": "debug",
        "z": "d57c4db3.61669",
        "name": "debug: to NS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 870,
        "y": 2240,
        "wires": []
    },
    {
        "id": "12ccd38.774812d",
        "type": "http request",
        "z": "d57c4db3.61669",
        "name": "Send DL to Helium NS!!!",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://console.helium.com/api/v1/down/{{key}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1150,
        "y": 2280,
        "wires": [ [ "c0c9e111.41a22" ] ]
    },
    {
        "id": "c0c9e111.41a22",
        "type": "debug",
        "z": "d57c4db3.61669",
        "name": "debug: NS response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1180,
        "y": 2240,
        "wires": []
    },
    {
        "id": "5e94589.12298a8",
        "type": "function",
        "z": "d57c4db3.61669",
        "name": "Helium UL interface",
        "func": "/******************************************/\n/*** Helium UL interface                 ***/\n/******************************************/\n\nbody = (typeof msg.payload == 'string') ? JSON.parse(msg.payload) : msg.payload;\nmsg.payload = translate(body);\nreturn msg;\n\nfunction translate(body) {\n\n    let feeds = {\n        // deviceEUI: \"\",                                     // mandatory\n        // time: \"\",\n        // coordinates: [],                                   // [longitude, latitude, altitude]\n        // used if NS provides resolved coordinates\n        solverInput: {\n            solverInputType: \"FeedInputForGenericSolver\",\n            // sequenceNumber: 1,                             // LoRaWAN FCntUp\n            // port: 1,                                       // LoRaWAN FPort\n            // receptionTime: \"\",\n            // SF: 12,                                        // LoRaWAN Spreading Factor\n            packets: [\n                // {\n                // baseStationId: \"0805022D\",\n                // antennaId: 0,\n                // antennaCoordinates: [7.0513, 43.6181], // [longitude, latitude, altitude]\n                // antennaHeight: 150,                    // in cm\n                // SNR: 10,                               // in dB\n                // RSSI: -29,                             // in dBm\n                // barometerMeasure: 0,                   // in mB\n                // arrivalSeconds: 1,                     // in seconds\n                // arrivalAdditionalNanos: 7275           // in nanoseconds\n                // }\n            ]\n            // dynamicMotionState: \"string\",    // ['MOVING', 'STATIC', 'UNKNOWN']\n            // temperatureMeasure: 0,           // in Celsius\n            // accelerometerMeasures: [],       // measures per axis, i.e. [x, y, z]\n            // gyroscopeMeasures: [],           // measures per axis, i.e. [roll, pitch, yaw]\n            // barometerMeasure: 0,             // in mBar\n            // lastContext: \"string\"            // Base64 encoded binary solver state\n            // with the last calculated position\n        },\n        payload: {\n            deviceProfileId: \"ABEEWAY/MICRO\",   // Currently only Abeeway Microtracker and\n            // Industrial Tracker are supported. \"deviceProfileId\"\n            // should be set to \"ABEEWAY/MICRO\" for both\n            payloadEncoded: \"\"\n        }\n    }\n\n    if ('dev_eui' in body) {\n        feeds.deviceEUI = body.dev_eui;\n    }\n    else {\n        throw new Error(\"Missing property: dev_eui\");\n    }\n\n    if (('reported_at' in body) && (typeof body.reported_at === 'number')) {\n        let t = (new Date(body.reported_at * 1000)).toISOString();\n        feeds.time = t;\n        feeds.solverInput.receptionTime = t;\n    }\n    if ('fcnt' in body) {\n        feeds.solverInput.sequenceNumber = body.fcnt;\n    }\n    if ('port' in body) {\n        feeds.solverInput.port = body.port\n    }\n\n    if ('hotspots' in body) {\n        if (('hotspots' in body) && Array.isArray(body.hotspots)) {\n            let gateways = body.hotspots;\n            let packet;\n            for (let i = 0; i < gateways.length; i++) {\n                packet = {};\n                if ('name' in gateways[i]) {\n                    packet.baseStationId = gateways[i].name;\n                }\n                if ('spreading' in gateways[i]) {\n                    // spreading = \"SF9BW125\"\n                    feeds.solverInput.SF = parseInt(gateways[i].spreading.slice(2, gateways[i].spreading.indexOf(\"BW\")));\n                } else { feeds.solverInput.SF = 10; }  // TODO!\n\n                if ('snr' in gateways[i]) {\n                    packet.SNR = gateways[i].snr;\n                }\n                if ('rssi' in gateways[i]) {\n                    packet.RSSI = gateways[i].rssi;\n                }\n                if (\n                    ('long' in gateways[i]) &&\n                    ('lat' in gateways[i])\n                ) {\n                    packet.antennaCoordinates = [\n                        gateways[i].long,\n                        gateways[i].lat\n                    ];\n                    if ('altitude' in gateways[i]) {\n                        packet.antennaCoordinates.push(gateways[i].altitude);\n                    }\n                }\n                feeds.solverInput.packets.push(packet);\n            }\n        }\n    }\n\n    if ('payload' in body) {\n        // feeds.payload.payloadEncoded = body.payload; \n        feeds.payload.payloadEncoded = Buffer.from(body.payload, 'base64').toString('hex');\n    }\n\n    return feeds;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 2140,
        "wires": [ [ "bf3654b8.2fcb18", "64dc2faf.dfe9e" ] ]
    },
    {
        "id": "2efa53d8.86315c",
        "type": "inject",
        "z": "d57c4db3.61669",
        "name": "Sample msg - Helium",
        "topic": "LoRaWAN_Uplink",
        "payload": "{\"app_eui\":\"6948A4B59F4666AD\",\"dev_eui\":\"1C29FBD1D2084E21\",\"devaddr\":\"B5A44869\",\"fcnt\":19,\"hotspots\":[{\"frequency\":912.2999877929688,\"id\":\"11KHJW1ePkfhLYptMwKyDzn4opLc62daahbi35uxhH3wwi7p6xr\",\"name\":\"icy-fiery-hippo\",\"reported_at\":1586868546,\"rssi\":-54,\"snr\":9.800000190734863,\"spreading\":\"SF9BW125\",\"status\":\"success\"},{\"frequency\":912.2999877929688,\"id\":\"11ni2CACdVUAshDvXif2pYUduAsvoawoxvVub6aqgHjSNsPEapZ\",\"name\":\"cool-chiffon-hornet\",\"reported_at\":1586868546,\"rssi\":-51,\"snr\":9,\"spreading\":\"SF9BW125\",\"status\":\"success\"}],\"id\":\"7c523974-4ce7-4a92-948b-55171a6e4d77\",\"metadata\":{\"labels\":[{\"id\":\"7d11aef4-4daf-4caf-b72a-f789b191ebe4\",\"name\":\"DontLabelMe\",\"organization_id\":\"d724b93a-895a-4175-9852-8738ae31050b\"}]},\"name\":\"Test Me\",\"payload\":\"SGVsbG8sIHdvcmxkIQ==\",\"port\":1,\"reported_at\":1586868546}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 280,
        "y": 2120,
        "wires": [ [ "5e94589.12298a8" ] ]
    },
    {
        "id": "13492271.a0fa2e",
        "type": "function",
        "z": "d57c4db3.61669",
        "name": "Helium DL interface",
        "func": "/******************************************/\n/*** Helium DL interface              ***/\n/******************************************/\n\nmsg.params = msg.payload;\nmsg.payload = {};\n\nmsg.key = \"ce1cca28-d7d6-4bd8-9c02-8c05b19c5388/UgNAFTiqcIu6w0O0c56xb8_KpTVUBgff/1c2261d3-f507-4007-ba8f-c50e995948bb\";\n\nmsg.headers = {\"content-type\": \"application/json\"};\n\nmsg.payload = {\n    \"dev_id\": msg.params.deveui.toLowerCase(),\n    \"port\": msg.params.port,\n    \"confirmed\": false,\n    \"payload_raw\": Buffer.from(msg.params.payload, 'hex').toString('base64')\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 2280,
        "wires": [ [ "49643e01.89be2", "12ccd38.774812d" ] ]
    },
    {
        "id": "d251e1df.f2cb6",
        "type": "debug",
        "z": "d57c4db3.61669",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 2100,
        "wires": []
    },
    {
        "id": "25e8f5ca.bac4ba",
        "type": "debug",
        "z": "d57c4db3.61669",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 2240,
        "wires": []
    }
]